<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ethereum.MetaMask.Blazor</name>
    </assembly>
    <members>
        <member name="T:Ethereum.MetaMask.Blazor.IMetaMaskEvents">
            <summary>
            MetaMask events.
            </summary>
        </member>
        <member name="E:Ethereum.MetaMask.Blazor.IMetaMaskEvents.AccountsChanged">
            <summary>
            Event when user changes account.
            </summary>
        </member>
        <member name="E:Ethereum.MetaMask.Blazor.IMetaMaskEvents.ChainChanged">
            <summary>
            Event when user changes chain.
            </summary>
        </member>
        <member name="E:Ethereum.MetaMask.Blazor.IMetaMaskEvents.Message">
            <summary>
            Event when it receives some message that the consumer should be notified of.
            The kind of message is identified by the type string.
            </summary>
        </member>
        <member name="E:Ethereum.MetaMask.Blazor.IMetaMaskEvents.Connect">
            <summary>
            Event when connecting to MetaMask.
            </summary>
        </member>
        <member name="E:Ethereum.MetaMask.Blazor.IMetaMaskEvents.Disconnect">
            <summary>
            Event when disconnecting from MetaMask.
            </summary>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.IMetaMaskEvents.OnAccountsChanged(System.String[])">
            <summary>
            Raises <see cref="E:Ethereum.MetaMask.Blazor.IMetaMaskEvents.AccountsChanged"/> event.
            </summary>
            <param name="accounts">Accounts list</param>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.IMetaMaskEvents.OnChainChanged(System.String)">
            <summary>
            Raises <see cref="E:Ethereum.MetaMask.Blazor.IMetaMaskEvents.ChainChanged"/> event.
            </summary>
            <param name="chainId">Current chain ID</param>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.IMetaMaskEvents.OnMessage(Ethereum.MetaMask.Blazor.Models.ProviderMessage)">
            <summary>
            Raises <see cref="E:Ethereum.MetaMask.Blazor.IMetaMaskEvents.Message"/> event.
            </summary>
            <param name="message">Provider message.</param>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.IMetaMaskEvents.OnConnect(Ethereum.MetaMask.Blazor.Models.ConnectInfo)">
            <summary>
            Raises <see cref="E:Ethereum.MetaMask.Blazor.IMetaMaskEvents.Connect"/> event.
            </summary>
            <param name="connectInfo">Connection info.</param>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.IMetaMaskEvents.OnDisconnect(Ethereum.MetaMask.Blazor.Models.ProviderRpcError)">
            <summary>
            Raises <see cref="E:Ethereum.MetaMask.Blazor.IMetaMaskEvents.Disconnect"/> event.
            </summary>
            <param name="rpcError">RPC error description with code.</param>
        </member>
        <member name="T:Ethereum.MetaMask.Blazor.IMetaMaskService">
            <summary>
            Interface of the MetaMask API.
            </summary>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.IMetaMaskService.IsMetaMaskAvailableAsync">
            <summary>
            Checks whether MetaMask available or not.
            </summary>
            <returns>True if available, otherwise false.</returns>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.IMetaMaskService.IsSiteConnectedAsync">
            <summary>
            Checks whether the site is connected to MetaMask or not.
            </summary>
            <returns>True if site connected, otherwise false.</returns>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.IMetaMaskService.ConnectAsync">
            <summary>
            Connects to the wallet.
            </summary>
            <returns>Account number in hexadecimal format.</returns>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.IMetaMaskService.ChangeAccountAsync">
            <summary>
            Requests to change account
            </summary>
            <returns>Account number in hexadecimal format.</returns>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.IMetaMaskService.GetSelectedAccountAsync">
            <summary>
            Gets current selected address.
            </summary>
            <returns>Account number in hexadecimal format.</returns>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.IMetaMaskService.GetSelectedChainAsync">
            <summary>
            Gets current selected chain.
            </summary>
            <returns>Chain number in hexadecimal format.</returns>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.IMetaMaskService.GetBalanceAsync(System.String)">
            <summary>
            Gets balance of the account of given address.
            </summary>
            <param name="address">Address in hexadecimal format.
            The default value (null) is currently selected address.</param>
            <returns>Integer of the current balance in wei.</returns>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.IMetaMaskService.GetTokenBalance(System.String,System.String)">
            <summary>
            Gets balance of the custom token.
            </summary>
            <param name="tokenAddress">Token or contract address.</param>
            <param name="account">Wallet address.
                Default value is currently selected address in MetaMask.</param>
            <returns>Integer of the token balance in wei.</returns>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.IMetaMaskService.SendTransactionAsync(System.String,System.Numerics.BigInteger,System.String)">
            <summary>
            Creates new message call transaction or a contract creation, if the data field contains code.
            </summary>
            <param name="to">Receiver account number in hexadecimal format.</param>
            <param name="value">Integer of the value sent with this transaction.</param>
            <param name="data">The compiled code of a contract OR the hash of the invoked method signature and encoded parameters.</param>
            <returns>Transaction hash in hexadecimal format.</returns>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.IMetaMaskService.RequestRpcAsync(System.String,System.Object[])">
            <summary>
            Make generic ethereum RPC request. See available methods https://eth.wiki/json-rpc/API
            </summary>
            <param name="method">RPC method name.</param>
            <param name="args">Parameters.</param>
            <returns>Ethereum RPC response message.</returns>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.NumericExtensions.ToHexString(System.Int32)">
            <summary>
            Converts integer to hexadecimal string where starts with '0x'.
            </summary>
            <param name="value">Integer value.</param>
            <returns>Hexadecimal string.</returns>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.NumericExtensions.ToHexString(System.Numerics.BigInteger)">
            <summary>
            Converts big integer to hexadecimal string where starts with '0x'.
            </summary>
            <param name="value">BigInteger value.</param>
            <returns>Hexadecimal string.</returns>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.NumericExtensions.HexToInt(System.String)">
            <summary>
            Converts hexadecimal string to integer.
            </summary>
            <param name="hexString">hexadecimal string.</param>
            <returns>Integer value.</returns>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.NumericExtensions.HexToBigInteger(System.String)">
            <summary>
            Converts hexadecimal string to big integer.
            </summary>
            <param name="hexString">hexadecimal string.</param>
            <returns>BigInteger value.</returns>
        </member>
        <member name="M:Ethereum.MetaMask.Blazor.ServiceCollectionExtensions.AddMetaMaskBlazor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds <see cref="T:Ethereum.MetaMask.Blazor.IMetaMaskService"/> to services collection.
            </summary>
        </member>
    </members>
</doc>
